// Code generated by protoc-gen-go.
// source: coredef.proto
// DO NOT EDIT!

/*
Package coredef is a generated protocol buffer package.

It is generated from these files:
	coredef.proto

It has these top-level messages:
	Region
	RegionLinkREQ
	RegionLinkACK
	ExpressACK
	AcceptedACK
	ConnectedACK
	ClosedACK
	TestEchoACK
*/
package coredef

import proto "github.com/golang/protobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type Region struct {
	ID               *int32  `protobuf:"varint,1,opt" json:"ID,omitempty"`
	Address          *string `protobuf:"bytes,2,opt" json:"Address,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Region) Reset()         { *m = Region{} }
func (m *Region) String() string { return proto.CompactTextString(m) }
func (*Region) ProtoMessage()    {}

func (m *Region) GetID() int32 {
	if m != nil && m.ID != nil {
		return *m.ID
	}
	return 0
}

func (m *Region) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

// 请求连接
type RegionLinkREQ struct {
	Profile          *Region `protobuf:"bytes,1,opt" json:"Profile,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RegionLinkREQ) Reset()         { *m = RegionLinkREQ{} }
func (m *RegionLinkREQ) String() string { return proto.CompactTextString(m) }
func (*RegionLinkREQ) ProtoMessage()    {}

func (m *RegionLinkREQ) GetProfile() *Region {
	if m != nil {
		return m.Profile
	}
	return nil
}

// 确认连接, 并且返回所有可用的地址列表
type RegionLinkACK struct {
	Status           *Region   `protobuf:"bytes,1,opt" json:"Status,omitempty"`
	AddressList      []*Region `protobuf:"bytes,2,rep" json:"AddressList,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *RegionLinkACK) Reset()         { *m = RegionLinkACK{} }
func (m *RegionLinkACK) String() string { return proto.CompactTextString(m) }
func (*RegionLinkACK) ProtoMessage()    {}

func (m *RegionLinkACK) GetStatus() *Region {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *RegionLinkACK) GetAddressList() []*Region {
	if m != nil {
		return m.AddressList
	}
	return nil
}

type ExpressACK struct {
	Msg              []byte  `protobuf:"bytes,1,opt" json:"Msg,omitempty"`
	MsgID            *uint32 `protobuf:"varint,2,opt" json:"MsgID,omitempty"`
	TargetID         *int64  `protobuf:"varint,3,opt" json:"TargetID,omitempty"`
	CallID           *int64  `protobuf:"varint,4,opt" json:"CallID,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ExpressACK) Reset()         { *m = ExpressACK{} }
func (m *ExpressACK) String() string { return proto.CompactTextString(m) }
func (*ExpressACK) ProtoMessage()    {}

func (m *ExpressACK) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *ExpressACK) GetMsgID() uint32 {
	if m != nil && m.MsgID != nil {
		return *m.MsgID
	}
	return 0
}

func (m *ExpressACK) GetTargetID() int64 {
	if m != nil && m.TargetID != nil {
		return *m.TargetID
	}
	return 0
}

func (m *ExpressACK) GetCallID() int64 {
	if m != nil && m.CallID != nil {
		return *m.CallID
	}
	return 0
}

// 一个连接接入
type AcceptedACK struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *AcceptedACK) Reset()         { *m = AcceptedACK{} }
func (m *AcceptedACK) String() string { return proto.CompactTextString(m) }
func (*AcceptedACK) ProtoMessage()    {}

// 已连接
type ConnectedACK struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *ConnectedACK) Reset()         { *m = ConnectedACK{} }
func (m *ConnectedACK) String() string { return proto.CompactTextString(m) }
func (*ConnectedACK) ProtoMessage()    {}

// 连接断开
type ClosedACK struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *ClosedACK) Reset()         { *m = ClosedACK{} }
func (m *ClosedACK) String() string { return proto.CompactTextString(m) }
func (*ClosedACK) ProtoMessage()    {}

// ==========================================================
// 测试用消息
// ==========================================================
type TestEchoACK struct {
	Content          *string `protobuf:"bytes,1,opt" json:"Content,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TestEchoACK) Reset()         { *m = TestEchoACK{} }
func (m *TestEchoACK) String() string { return proto.CompactTextString(m) }
func (*TestEchoACK) ProtoMessage()    {}

func (m *TestEchoACK) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func init() {
}
